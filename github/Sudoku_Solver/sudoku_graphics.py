# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'sudoku_graphics.ui'
#
# Created by: PyQt5 UI code generator 5.15.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QMessageBox

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~LOGIC~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
board = [[0 for i in range(9)] for i in range(9)]
def isInt(val):
    try:
        int(val)
        return True
    except ValueError:
        return False
def print_board(inp):
    print()
    for i in range(len(inp)):
        if i % 3 == 0 and i != 0:
            print("- - - - - - - - - - - - ")
        for j in range(len(inp[0])):
            if j % 3 == 0 and j != 0:
                print(" | ", end = "")
            if j == 8:
                print(inp[i][j])
            else:
                print(str(inp[i][j]) + " ", end = "")
    print()
def solve(inp):

    find = find_empty(inp)
    if not find:
        return True
    else:
        row, col = find
    for i in range(1,10):
        if valid(inp, i, (row, col)):
            inp[row][col] = i
            if solve(inp):
                return True
            inp[row][col] = 0
    return False

def valid(inp, num, pos):
    #check row and col
    for i in range(len(inp[0])):
        if inp[pos[0]][i] == num and pos[1] != i:
            return False
    for i in range(len(inp)):
        if inp[i][pos[1]] == num and pos[0] != i:
            return False
    #check box
    box_x = pos[1] // 3
    box_y = pos[0] // 3
    for i in range(box_y*3, box_y*3+3):
        for j in range(box_x*3, box_x*3+3):
            if inp[i][j] == num and (i,j) != pos:
                return False
    return True

def find_empty(inp):
    for i in range(len(inp)):
        for j in range(len(inp[0])):
            if inp[i][j] == 0:
                return (i, j)
    return None

# ~~~~~~~~~~~~~~~~~~~~~~~~GRAPHICS~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(801, 576)
        MainWindow.setStyleSheet("background-color: rgb(60,60,100);")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.title = QtWidgets.QLabel(self.centralwidget)
        self.title.setGeometry(QtCore.QRect(310, 5, 171, 51))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)

        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(60, 60, 100))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(60, 60, 100))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(60, 60, 100))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255, 128))
        brush.setStyle(QtCore.Qt.NoBrush)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.PlaceholderText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(60, 60, 100))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(60, 60, 100))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(60, 60, 100))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255, 128))
        brush.setStyle(QtCore.Qt.NoBrush)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.PlaceholderText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(60, 60, 100))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(60, 60, 100))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(60, 60, 100))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255, 128))
        brush.setStyle(QtCore.Qt.NoBrush)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.PlaceholderText, brush)
        self.title.setPalette(palette)
        font = QtGui.QFont()
        font.setPointSize(28)
        self.title.setFont(font)
        self.title.setStyleSheet("color: white;")
        self.title.setObjectName("title")

        self.desc1 = QtWidgets.QLabel(self.centralwidget)
        self.desc1.setGeometry(QtCore.QRect(100, 70, 581, 16))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        self.desc1.setPalette(palette)
        font = QtGui.QFont()
        font.setPointSize(8)
        self.desc1.setFont(font)
        self.desc1.setStyleSheet("color: white;")
        self.desc1.setObjectName("desc1")

        self.desc2 = QtWidgets.QLabel(self.centralwidget)
        self.desc2.setGeometry(QtCore.QRect(120, 90, 561, 16))
        self.desc2.setStyleSheet("color: white;")
        self.desc2.setObjectName("desc2")

        self.desc3 = QtWidgets.QLabel(self.centralwidget)
        self.desc3.setGeometry(QtCore.QRect(20, 70, 190, 500))
        self.desc3.setStyleSheet("color: white;")
        self.desc3.setObjectName("desc3")
        self.desc3.lower()

        self.frame = QtWidgets.QFrame(self.centralwidget)
        self.frame.setGeometry(QtCore.QRect(300, 140, 381, 381))
        font = QtGui.QFont()
        font.setPointSize(35)
        self.frame.setFont(font)
        self.frame.setStyleSheet("background-color: white; padding-left: 8px;")
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")
        self.ns = []
        for i in range(1,82):
            test = "n_"+str(i)
            self.ns.append(test)
        for i in range(1,82):
            self.ns[i-1] = QtWidgets.QTextEdit(self.frame)
            col = ((i-1) % 9)
            row = ((i-1) // 9)
            current_x = 40 * col
            current_y = 40 * row
            if col >= 6:
                current_x += 20
            elif col >= 3:
                current_x += 10
            if row >= 6:
                current_y += 20
            elif row >= 3:
                current_y += 10
            self.ns[i-1].setGeometry(QtCore.QRect(current_x, current_y, 41, 41))
            font = QtGui.QFont()
            font.setPointSize(15)
            self.ns[i-1].setFont(font)
            self.ns[i-1].setObjectName("n_"+str(i))
        self.solve = QtWidgets.QPushButton(self.centralwidget)
        self.solve.setGeometry(QtCore.QRect(140, 190, 93, 28))
        self.solve.setStyleSheet("background-color: rgb(70,70,130); color:white;")
        self.solve.setObjectName("solve")
        self.Check = QtWidgets.QPushButton(self.centralwidget)
        self.Check.setGeometry(QtCore.QRect(140, 310, 93, 28))
        self.Check.setStyleSheet("background-color: rgb(70,70,130); color:white;")
        self.Check.setObjectName("Check")
        self.Reset = QtWidgets.QPushButton(self.centralwidget)
        self.Reset.setGeometry(QtCore.QRect(140, 430, 93, 28))
        self.Reset.setStyleSheet("background-color: rgb(70,70,130); color:white;")
        self.Reset.setObjectName("Reset")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 801, 26))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.solve.clicked.connect(self.SolveClicked)
        self.Check.clicked.connect(self.checkClicked)
        self.Reset.clicked.connect(self.resetClicked)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Sudoku!"))
        self.title.setText(_translate("MainWindow", "Sudoku!"))
        self.desc1.setText(_translate("MainWindow", "Click the Solve button to solve the current board, click the Check button to check if the current board"))
        self.desc2.setText(_translate("MainWindow", "is valid, click the Clear button to clear the board. DO NOT CLICK SOLVE BEFORE VALIDATING."))
        self.desc3.setText(_translate("MainWindow", "All entries that\n\n are not the \n\nnumbers 1-9,\n\ninclusive, will\n\n be disregarded."))
        self.solve.setText(_translate("MainWindow", "Solve"))
        self.Check.setText(_translate("MainWindow", "Check"))
        self.Reset.setText(_translate("MainWindow", "Clear"))

    def resetClicked(self):
        for i in range(0,81):
            self.ns[i].setText("")

    def checkClicked(self):
        for i in range(0,81):
            row = i // 9
            col = i % 9
            mytext = self.ns[i].toPlainText()
            if isInt(mytext):
                if int(mytext) > 0 and int(mytext) < 10:
                    board[row][col] = int(mytext)
                else:
                    board[row][col] = 0
            else:
                board[row][col] = 0
        j = 0;
        row = j // 9
        col = j % 9
        while j < 81:
            if (board[row][col] != 0) and (not valid(board, board[row][col], (row, col))):
                msg = QMessageBox()
                msg.setWindowTitle("Board Validity")
                msg.setText("The board is not valid to solve!")
                msg.setIcon(QMessageBox.Critical)
                msg.setStandardButtons(QMessageBox.Ok)
                msg.setInformativeText("Please do not click the Solve button until validated.")
                x = msg.exec_()
                break
            j += 1
            row = j // 9
            col = j % 9
        else:
            msg = QMessageBox()
            msg.setWindowTitle("Board Validity")
            msg.setText("The board is valid to solve!")
            msg.setIcon(QMessageBox.Information)
            msg.setStandardButtons(QMessageBox.Ok)
            msg.setInformativeText("You may click the Solve button :)")
            x = msg.exec_()

    def SolveClicked(self):
        for i in range(0,81):
            mytext = self.ns[i].toPlainText()
            if isInt(mytext):
                if int(mytext) > 0 and int(mytext) < 10:
                    row = i // 9
                    col = i % 9
                    board[row][col] = int(mytext)
        solve(board)
        for i in range(0,81):
            row = i // 9
            col = i % 9
            self.ns[i].setText(str(board[row][col]))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
